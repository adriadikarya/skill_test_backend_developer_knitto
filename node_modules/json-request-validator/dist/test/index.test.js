"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = __importDefault(require("../src/index"));
var request = function (rules, body) {
    if (body === void 0) { body = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var req, res, next, validate;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    req = {
                        body: body,
                    };
                    res = {
                        status: function () { return res; },
                        send: function (data) { return data; },
                    };
                    next = function () { return ({ status: 200 }); };
                    return [4, index_1.default(rules)(req, res, next)];
                case 1:
                    validate = _a.sent();
                    return [2, validate];
            }
        });
    });
};
var User = { items: ['kenzdozz', 'kenzie'], exists: function (item) { return User.items.includes(item); } };
var rules = {
    firstName: 'required',
    lastName: {
        rules: 'required|maxlen',
        maxlen: 6,
    },
    username: {
        rules: 'required|unique',
        unique: User,
    },
    age: 'required|number',
    hobbies: 'required|array',
    email: 'required|email',
    password: {
        rules: 'required|minlen',
        minlen: 5,
    },
    gender: {
        rules: 'belongsto|required',
        belongsto: ['Male', 'Female'],
    },
    skills: {
        rules: 'required|array|eachbelongsto',
        eachbelongsto: ['Javascript', 'PHP', 'CSS', 'HTML'],
    },
    skillLevels: 'required|object',
    location: {
        rules: 'object|required',
        object: {
            lat: 'required|number',
            lng: 'required|number',
        },
    },
    experiences: {
        rules: 'required|arrayobject',
        arrayobject: {
            company: 'required',
            years: 'required|number',
        },
    },
};
describe('Test index', function () {
    it('Should validate failing rules, all rules covered', function () { return __awaiter(void 0, void 0, void 0, function () {
        var body, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    body = {
                        lastName: 'qwertyuiop',
                        username: 'kenzdozz',
                        age: 'Ten',
                        hobbies: 'Swimming',
                        email: 'Kenny',
                        password: 't54r',
                        gender: 'Malet',
                        skills: ['PHP', 'Nodejs'],
                        skillLevels: 5,
                        location: { lat: '', lng: '5t' },
                        experiences: [
                            { company: 'ITEX', years: 'one' },
                            { company: '', years: 3 },
                        ],
                    };
                    return [4, request(rules, body)];
                case 1:
                    res = _a.sent();
                    chai_1.expect(res.error).to.deep.equal('Validation errors.');
                    chai_1.expect(res.fields.firstName).to.deep.equal('FirstName is required.');
                    chai_1.expect(res.fields.lastName).to.deep.equal('LastName must have maximum length of 6.');
                    chai_1.expect(res.fields.username).to.deep.equal('Username already exists.');
                    chai_1.expect(res.fields.age).to.deep.equal('Age must be a number.');
                    chai_1.expect(res.fields.hobbies).to.deep.equal('Hobbies must be an array.');
                    chai_1.expect(res.fields.email).to.deep.equal('Email must be a valid email address.');
                    chai_1.expect(res.fields.password).to.deep.equal('Password must have minimum length of 5.');
                    chai_1.expect(res.fields.gender).to.deep.equal("Gender must be one of 'Male, Female'.");
                    chai_1.expect(res.fields.skills).to.deep.equal("Each of Skills must be one of 'Javascript, PHP, CSS, HTML'.");
                    chai_1.expect(res.fields.skillLevels).to.deep.equal('SkillLevels must be an object.');
                    chai_1.expect(res.fields['location.lat']).to.deep.equal('Lat is required.');
                    chai_1.expect(res.fields['location.lng']).to.deep.equal('Lng must be a number.');
                    chai_1.expect(res.fields['experiences.0.years']).to.deep.equal('Years must be a number.');
                    chai_1.expect(res.fields['experiences.1.company']).to.deep.equal('Company is required.');
                    return [2];
            }
        });
    }); });
    it('Should validate passing rules, all rules covered', function () { return __awaiter(void 0, void 0, void 0, function () {
        var body, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    body = {
                        firstName: 'Kenneth',
                        lastName: 'Onah',
                        username: 'KenzDozz',
                        age: 90,
                        hobbies: ['Swimming', 'Video Games'],
                        email: 'KenzDozz@gmail.com',
                        password: 't54r4rjf',
                        gender: 'Male',
                        skills: ['PHP', 'Javascript'],
                        skillLevels: { PHP: 5, Javascript: 4 },
                        location: { lat: 4454, lng: 9823 },
                        experiences: [
                            { company: 'ITEX', years: 1 },
                            { company: 'Gigasec', years: 2 },
                        ],
                    };
                    return [4, request(rules, body)];
                case 1:
                    res = _a.sent();
                    chai_1.expect(res.status).to.deep.equal(200);
                    return [2];
            }
        });
    }); });
});
