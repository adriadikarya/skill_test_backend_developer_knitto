"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var checkArray = function (input) { return Array.isArray(input); };
exports.checkArray = checkArray;
var checkRequired = function (input) {
    if (checkArray(input))
        return !!input.length;
    if (input === false)
        return true;
    return !!input;
};
exports.checkRequired = checkRequired;
var checkObject = function (input) { return typeof input === 'object' && input !== null && !checkArray(input); };
exports.checkObject = checkObject;
var checkEmail = function (input) { return /^[\w._]+@[\w]+[-.]?[\w]+\.[\w]+$/.test(input); };
exports.checkEmail = checkEmail;
var checkNumber = function (input) { return ("" + input).search(/\D/) < 0; };
exports.checkNumber = checkNumber;
var checkString = function (input) { return typeof input === 'string'; };
exports.checkString = checkString;
var checkUnique = function (input, ruleItem) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!ruleItem.unique)
                    throw ruleItem.field + " rules must include 'unique' fields specifying the unique model.";
                if (typeof ruleItem.unique.exists !== 'function')
                    throw ruleItem.field + " rules unique model must implement exists function.";
                return [4, ruleItem.unique.exists(input)];
            case 1: return [2, !(_a.sent())];
        }
    });
}); };
exports.checkUnique = checkUnique;
var checkMinlen = function (input, ruleItem) {
    if (!Number.isInteger(ruleItem.minlen))
        throw ruleItem.field + " rules must include 'minlen' fields with integer value.";
    return input.length >= ruleItem.minlen;
};
exports.checkMinlen = checkMinlen;
var checkMaxlen = function (input, ruleItem) {
    if (!Number.isInteger(ruleItem.maxlen))
        throw ruleItem.field + " rules must include 'maxlen' fields with integer value.";
    return input.length <= ruleItem.maxlen;
};
exports.checkMaxlen = checkMaxlen;
var checkBelongsto = function (input, ruleItem) {
    if (!checkArray(ruleItem.belongsto))
        throw ruleItem.field + " rules must include 'belongsto' fields with array of items.";
    var values = ruleItem.belongsto.map(function (rec) { return (typeof rec === 'string' ? rec.toLowerCase() : rec); });
    return values.includes(typeof input === 'string' ? input.toLowerCase() : input);
};
exports.checkBelongsto = checkBelongsto;
var checkEachBelongsTo = function (input, ruleItem) {
    if (!checkArray(ruleItem.eachbelongsto))
        throw ruleItem.field + " rules must include 'eachbelongsto' fields with array of items.";
    if (!checkArray(input))
        input = ("" + (input || '')).split(',').map(function (a) { return a.trim(); });
    var values = ruleItem.eachbelongsto.map(function (rec) { return (typeof rec === 'string' ? rec.toLowerCase() : rec); });
    var isValid = true;
    for (var _i = 0, input_1 = input; _i < input_1.length; _i++) {
        var eItem = input_1[_i];
        isValid = values.includes(typeof eItem === 'string' ? eItem.toLowerCase() : eItem);
        if (!isValid)
            return isValid;
    }
    return isValid;
};
exports.checkEachBelongsTo = checkEachBelongsTo;
var Checkers = function (data, ruleItem) { return ({
    array: function () { return checkArray(data); },
    belongsto: function () { return checkBelongsto(data, ruleItem); },
    eachbelongsto: function () { return checkEachBelongsTo(data, ruleItem); },
    email: function () { return checkEmail(data); },
    maxlen: function () { return checkMaxlen(data, ruleItem); },
    minlen: function () { return checkMinlen(data, ruleItem); },
    number: function () { return checkNumber(data); },
    string: function () { return checkString(data); },
    object: function () { return checkObject(data); },
    required: function () { return checkRequired(data); },
    unique: function () { return checkUnique(data, ruleItem); },
}); };
exports.default = Checkers;
