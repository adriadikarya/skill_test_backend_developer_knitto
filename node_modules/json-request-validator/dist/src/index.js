"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var Checkers_1 = __importStar(require("./Checkers"));
String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
var getErrorMessage = function (rule, item) {
    if (item.messages && item.messages[rule])
        return item.messages[rule];
    var message = '';
    var field = item.field.capitalize().replace(/_/g, ' ');
    if (rule === 'required')
        message = field + " is required.";
    else if (rule === 'string')
        message = field + " must be a string.";
    else if (rule === 'unique')
        message = field + " already exists.";
    else if (rule === 'image')
        message = field + " must be an image.";
    else if (rule === 'array')
        message = field + " must be an array.";
    else if (rule === 'number')
        message = field + " must be a number.";
    else if (rule === 'object')
        message = field + " must be an object.";
    else if (rule === 'email')
        message = field + " must be a valid email address.";
    else if (rule === 'arrayobject')
        message = field + " must be an array of objects.";
    else if (rule === 'minlen')
        message = field + " must have minimum length of " + item.minlen + ".";
    else if (rule === 'maxlen')
        message = field + " must have maximum length of " + item.maxlen + ".";
    else if (rule === 'belongsto')
        message = field + " must be one of '" + item.belongsto.join(', ') + "'.";
    else if (rule === 'eachbelongsto')
        message = "Each of " + field + " must be one of '" + item.eachbelongsto.join(', ') + "'.";
    return message;
};
var formatRules = function (validationRules) {
    var ruleItems = [];
    if (Checkers_1.checkObject(validationRules)) {
        for (var key in validationRules) {
            var ruleItemVal = validationRules[key];
            var ruleItem = { field: key };
            if (typeof ruleItemVal === 'string')
                ruleItem.rules = ruleItemVal;
            else {
                if (!Checkers_1.checkObject(ruleItemVal))
                    throw "Rule " + key + " must be an object or a string.";
                ruleItem = __assign(__assign({}, ruleItem), ruleItemVal);
            }
            ruleItems.push(ruleItem);
        }
    }
    else if (!Checkers_1.checkArray(ruleItems))
        throw 'ruleItems must be an array or an object';
    else
        ruleItems = validationRules;
    return ruleItems;
};
var validator = function (body, validationRules, arrOuterField, arrIndex) {
    if (arrOuterField === void 0) { arrOuterField = ''; }
    if (arrIndex === void 0) { arrIndex = null; }
    return __awaiter(void 0, void 0, void 0, function () {
        var ruleItems, errors, hasConflict, isValid, checkArrayObject, ruleItemValidator, _i, ruleItems_1, ruleItem;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!Checkers_1.checkObject(body))
                        throw 'body must be an object';
                    if (!Checkers_1.checkRequired(validationRules))
                        throw 'validationRules must be provided';
                    ruleItems = formatRules(validationRules);
                    errors = {};
                    hasConflict = false;
                    isValid = true;
                    checkArrayObject = function (inputs, ruleItem) { return __awaiter(void 0, void 0, void 0, function () {
                        var _a, _b, _i, index, inputBody, outerField, validate;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    if (!Checkers_1.checkArray(inputs))
                                        return [2, false];
                                    if (!Checkers_1.checkObject(ruleItem.arrayobject))
                                        throw ruleItem.field + " arrayobject must be an object";
                                    _a = [];
                                    for (_b in inputs)
                                        _a.push(_b);
                                    _i = 0;
                                    _c.label = 1;
                                case 1:
                                    if (!(_i < _a.length)) return [3, 4];
                                    index = _a[_i];
                                    inputBody = inputs[index];
                                    if (!Checkers_1.checkObject(inputBody))
                                        return [2, false];
                                    outerField = arrIndex !== null ? arrOuterField + "." + arrIndex + "." + ruleItem.field : ruleItem.field;
                                    return [4, validator(inputBody, ruleItem.arrayobject, outerField, index)];
                                case 2:
                                    validate = _c.sent();
                                    if (!validate.isValid) {
                                        errors = __assign(__assign({}, errors), validate.errors);
                                        hasConflict = validate.hasConflict || hasConflict;
                                    }
                                    _c.label = 3;
                                case 3:
                                    _i++;
                                    return [3, 1];
                                case 4: return [2, true];
                            }
                        });
                    }); };
                    ruleItemValidator = function (data, ruleItem, outerField) {
                        if (outerField === void 0) { outerField = ''; }
                        return __awaiter(void 0, void 0, void 0, function () {
                            var rules, _i, rules_1, rule, ruleIsValid, bodyParam, objectRules, _a, objectRules_1, oRule, checker, preField, field;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        if (!ruleItem.field || !ruleItem.rules)
                                            throw 'Validation Rules must contain "rules and field" properties.';
                                        rules = (("" + ruleItem.rules).toLowerCase()).split('|').filter(function (item) { return item; });
                                        if (rules.includes('required') && rules[0] !== 'required') {
                                            rules = rules.filter(function (item) { return item !== 'required'; });
                                            rules.unshift('required');
                                        }
                                        _i = 0, rules_1 = rules;
                                        _b.label = 1;
                                    case 1:
                                        if (!(_i < rules_1.length)) return [3, 13];
                                        rule = rules_1[_i];
                                        if (errors[ruleItem.field])
                                            return [3, 12];
                                        ruleIsValid = true;
                                        bodyParam = data[ruleItem.field] ? data[ruleItem.field] : '';
                                        if (typeof bodyParam === 'string')
                                            bodyParam = bodyParam.trim();
                                        if (rule === 'required')
                                            ruleIsValid = Checkers_1.checkRequired(bodyParam);
                                        if (!bodyParam) return [3, 11];
                                        if (!(rule === 'unique')) return [3, 3];
                                        return [4, Checkers_1.checkUnique(bodyParam, ruleItem)];
                                    case 2:
                                        ruleIsValid = _b.sent();
                                        return [3, 11];
                                    case 3:
                                        if (!(rule === 'arrayobject')) return [3, 5];
                                        return [4, checkArrayObject(bodyParam, ruleItem)];
                                    case 4:
                                        ruleIsValid = _b.sent();
                                        return [3, 11];
                                    case 5:
                                        if (!(rule === 'object')) return [3, 10];
                                        if (ruleItem.object && !Checkers_1.checkObject(ruleItem.object))
                                            throw ruleItem.field + " 'object' field value must be an object.";
                                        ruleIsValid = Checkers_1.checkObject(bodyParam);
                                        if (!(ruleIsValid && ruleItem.object)) return [3, 9];
                                        outerField += ruleItem.field + ".";
                                        objectRules = formatRules(ruleItem.object);
                                        _a = 0, objectRules_1 = objectRules;
                                        _b.label = 6;
                                    case 6:
                                        if (!(_a < objectRules_1.length)) return [3, 9];
                                        oRule = objectRules_1[_a];
                                        return [4, ruleItemValidator(bodyParam, oRule, outerField)];
                                    case 7:
                                        _b.sent();
                                        _b.label = 8;
                                    case 8:
                                        _a++;
                                        return [3, 6];
                                    case 9: return [3, 11];
                                    case 10:
                                        checker = Checkers_1.default(bodyParam, ruleItem);
                                        if (!Object.keys(checker).includes(rule))
                                            throw rule + " does not exist.";
                                        ruleIsValid = checker[rule]();
                                        _b.label = 11;
                                    case 11:
                                        if (!ruleIsValid) {
                                            isValid = false;
                                            if (rule === 'unique')
                                                hasConflict = true;
                                            preField = arrIndex !== null ? arrOuterField + "." + arrIndex + "." : '';
                                            field = outerField ? "" + outerField + ruleItem.field : ruleItem.field;
                                            errors[preField + field] = getErrorMessage(rule, ruleItem);
                                        }
                                        _b.label = 12;
                                    case 12:
                                        _i++;
                                        return [3, 1];
                                    case 13: return [2];
                                }
                            });
                        });
                    };
                    _i = 0, ruleItems_1 = ruleItems;
                    _a.label = 1;
                case 1:
                    if (!(_i < ruleItems_1.length)) return [3, 4];
                    ruleItem = ruleItems_1[_i];
                    return [4, ruleItemValidator(body, ruleItem)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    _i++;
                    return [3, 1];
                case 4: return [2, { isValid: isValid, hasConflict: hasConflict, errors: errors }];
            }
        });
    });
};
var validateInputs = function (validationRules, endRequest) {
    if (endRequest === void 0) { endRequest = true; }
    return function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
        var validate, errors, hasConflict, statusCode;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, validator(req.body, validationRules)];
                case 1:
                    validate = _a.sent();
                    errors = validate.errors, hasConflict = validate.hasConflict;
                    if (Object.keys(errors).length) {
                        statusCode = hasConflict ? 409 : 400;
                        if (endRequest) {
                            return [2, res.status(statusCode).send({
                                    status: statusCode,
                                    error: 'Validation errors.',
                                    fields: errors,
                                })];
                        }
                        req.validator = { isValid: false, statusCode: statusCode, errors: errors };
                    }
                    return [2, next()];
            }
        });
    }); };
};
module.exports = validateInputs;
